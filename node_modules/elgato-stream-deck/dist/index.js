"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.openStreamDeck = exports.getStreamDeckInfo = exports.listStreamDecks = exports.DeviceModelId = void 0;
const HID = require("node-hid");
const models_1 = require("./models");
var models_2 = require("./models");
Object.defineProperty(exports, "DeviceModelId", { enumerable: true, get: function () { return models_2.DeviceModelId; } });
/*
 * The original StreamDeck uses packet sizes too large for the hidraw driver which is
 * the default on linux. https://github.com/node-hid/node-hid/issues/249
 */
HID.setDriverType('libusb');
/**
 * List detected devices
 */
function listStreamDecks() {
    const devices = [];
    for (const dev of HID.devices()) {
        const model = models.find((m) => m.productId === dev.productId);
        if (model && dev.vendorId === 0x0fd9 && dev.path) {
            devices.push({
                model: model.id,
                path: dev.path,
                serialNumber: dev.serialNumber,
            });
        }
    }
    return devices;
}
exports.listStreamDecks = listStreamDecks;
/**
 * Get the info of a device if the given path is a streamdeck
 */
function getStreamDeckInfo(path) {
    return listStreamDecks().find((dev) => dev.path === path);
}
exports.getStreamDeckInfo = getStreamDeckInfo;
const models = [
    {
        id: models_1.DeviceModelId.ORIGINAL,
        productId: 0x0060,
        class: models_1.StreamDeckOriginal,
    },
    {
        id: models_1.DeviceModelId.MINI,
        productId: 0x0063,
        class: models_1.StreamDeckMini,
    },
    {
        id: models_1.DeviceModelId.XL,
        productId: 0x006c,
        class: models_1.StreamDeckXL,
    },
    {
        id: models_1.DeviceModelId.ORIGINALV2,
        productId: 0x006d,
        class: models_1.StreamDeckOriginalV2,
    },
];
function openStreamDeck(devicePath, userOptions) {
    let foundDevices = listStreamDecks();
    if (devicePath) {
        foundDevices = foundDevices.filter((d) => d.path === devicePath);
    }
    if (foundDevices.length === 0) {
        if (devicePath) {
            throw new Error(`Device "${devicePath}" was not found`);
        }
        else {
            throw new Error('No Stream Decks are connected.');
        }
    }
    // Clone the options, to ensure they dont get changed
    const options = { ...userOptions };
    const model = models.find((m) => m.id === foundDevices[0].model);
    if (!model) {
        throw new Error('Stream Deck is of unexpected type.');
    }
    return new model.class(foundDevices[0], options);
}
exports.openStreamDeck = openStreamDeck;
//# sourceMappingURL=index.js.map